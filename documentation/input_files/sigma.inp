# sigma.inp

# Energy cutoff for the screened Coulomb interaction, in Ry. The screened
# Coulomb interaction $W_{GG'}(q)$ will contain all G-vectors with kinetic energy
# $|q+G|^2$ up to this cutoff. Default is the epsilon_cutoff used in the
# epsilon code. This value cannot be larger than the epsilon_cutoff or
# the bare_coulomb_cutoff.
#screened_coulomb_cutoff  35.0

# Energy cutoff for the bare Coulomb interaction, in Ry. The bare Coulomb
# interaction $v(G+q)$ will contain all G-vectors with kinetic energy
# $|q+G|^2$ up to this cutoff. Default is the WFN cutoff.
#bare_coulomb_cutoff      60.0

# Total number of bands (valence+conduction) to sum over. Defaults to the
# number of bands in the WFN file minus 1.
#number_bands            1000

# ### Specification of self-energy matrix elements to compute
# The flags below control which matrix elements $\langle \psi_n | \Sigma(E_l) | \psi_m \rangle$
# will be computed, where $n$ and $m$ are band indices, and $E_l$ is the energy at
# which to evaluate the self-energy operator. Note that $E_l$ is irrelevant for
# Hatree-Fock and static COHSEX calculations, i.e., if [[frequency_dependence]] == -1 or 0.
#
# In typical cases, you just want to compute diagonal ($n=m$) matrix elements
# of $\Sigma$ between a lower and an uper bound. In this case, you can simply
# use the flags [[band_index_min]] and [[band_index_max]] to specify these bounds.
# Advanced users can also use the flags [[diag]], [[offdiag]] and [[sigma_matrix]]
# in order to compute arbitrary diagonal and off-diagonal matrix elements.
#
#
# Minimum band index for diagonal matrix elements ($n=m$) of $\Sigma$ to be computed.
band_index_min   15
# Maximum band index for diagonal matrix elements ($n=m$) of $\Sigma$ to be computed.
band_index_max   22
#
# Number or diagonal matrix elements, i.e., for $n=m$.
#number_diag   ndiag
#
# Band indices for the diagonal matrix elements of Sigma ($n=m=l$)
#begin diag
#   n_1
#   n_2
#   ...
#   n_ndiag
#end
#
#
# Number of off-diagonal matrix elements
#number_offdiag   noffdiag
#
# The off-diagonal matrix elements of Sigma
# [[band_index_min]] <= n <= [[band_index_max]]
# [[band_index_min]] <= m <= [[band_index_max]]
# [[band_index_min]] <= l <= [[band_index_max]]
# NOTE: the offdiag utility only works with the sigma_matrix syntax, below.
#begin offdiag
#   n_1   m_1   l_1
#   n_2   m_2   l_2
#   ...
#   n_noffdiag   m_noffdiag   l_noffdiag
#end
#
#
# Alternatively, select a specific value of l and let n and m vary
# in the range from band_index_min to band_index_max
# Set l to 0 to skip the off-diagonal calculation (default)
# If l = -1 then l_i is set to n_i (i = 1 ... noffdiag)
# i.e. each row is computed at different eigenvalue
# If l = -2 then l_i is set to m_i (i = 1 ... noffdiag)
# i.e. each column is computed at different eigenvalue
# For l > 0, all elements are computed at eigenvalue of band l.
# Set t to 0 for the full matrix (default)
# or to -1/+1 for the lower/upper triangle
#
#sigma_matrix   l   t

# The range of spin indices for which Sigma is calculated
# The default is the first spin component
#
#
#spin_index_min   1
#spin_index_max   1

# Cutoff energy (in Ry) for averaging the Coulomb Interaction
# in the mini-Brillouin Zones around the Gamma-point
# without Truncation or for Cell Wire or Cell Slab Truncation.
#cell_average_cutoff 1.0d-12

# Frequency dependence of the inverse dielectric matrix.
#
# - Set to -1 for the Hartree-Fock and hybrid functional approximation.
# - Set to 0 for the static COHSEX approximation.
# - Set to 1 for the Generalized Plasmon Pole model (default).
# - Set to 2 for the full frequency dependence.
# - Set to 3 for the Generalized Plasmon Pole model in the Godby-Needs flavor.
#    Note: does not work with parallelization in frequencies.
#
#frequency_dependence 1

# Full frequency dependence method for the polarizability.
# set to 0 for the real-axis integration method.
# set to 2 for the contour-deformation method (default).
#frequency_dependence_method 2

# ### Frequency grid used to evaluate the self-energy
# In order to evaluate $\Sigma(\omega)$, you have to specify a frequency grid
# for the frequencies $\omega$. You can control where to center/shift the grid.
#
#
# Use this flag to control where the center of the frequency grid is.
# The options are:
#
# - 0 if you don't want any shift, i.e., $\omega$ is an absolute energy
# - 1 if you want to shift the first frequency $\omega=0$ to the Fermi energy
#    (this was the default behavior in `BerkeleyGW-1.0`)
# - 2 if you want to center the frequency grid around each mean-field QP energy (default)
#frequency_grid_shift 2
#
#
# If [[frequency_grid_shift]] is 2 (default), specify the frequency spacing
# [[delta_frequency_eval]] in eV (default=0.2) and the width, in eV, of the
# evaluation grid centered around each QP state (default=2.0). The code
# will generate a frequency grid from -[[max_frequency_eval]] to [[max_frequency_eval]].
# You should increase the value of [[max_frequency_eval]] if you expect the
# absolute QP corrections to be large, such as when dealing with molecules
# (the code will warn if the frequency grid is too small).
# Note for advanced users: the grids are actually centered around the outer
# mean-field energies, so you can use `WFN_outer` and eqp_outer_corrections or
# outer scissors parameters to fine-tune the frequency grid.
#
#delta_frequency_eval 0.2
#max_frequency_eval 2.0
#
#
# If [[frequency_grid_shift]] is 0 or 1, specify the initial frequency
# [[init_frequency_eval]] (before the shift), in eV, the frequency spacing
# [[delta_frequency_eval]], in eV, and the number of frequency points
# [[number_frequency_eval]].
#
#init_frequency_eval 0.0
#delta_frequency_eval 0.1
#number_frequency_eval 501

# For contour deformation calculations, specify the integration method on the
# imaginary axis (default is 0). Options are:
#
# - 0 for piecewise constant matrix elements centered at each imaginary frequency
# - 2 for piecewise quadratic matrix elements over each integration segment
# - 3 for cubic Hermite matrix elements over each integration segment
#cd_integration_method 0

# ### Static subspace approximation 
# Within the contour deformation formalism ([[frequency_dependence]]==2 and [[frequency_dependence_method]]==2),
# this parameters activate the full-frequency static subspace approximation method in sigma.
# The full-frequency inverse dielectric matrix calculated by epsilon need to be computed 
# using the static subspace method (set `chi_eigenvalue_cutoff` in [`epsilon.inp`](epsilon-keywords.md)). 
# For the method to be effective the epsilon matrices have to be 
# written using the subspace basis (use `write_subspace_epsinv` in [`epsilon.inp`](epsilon-keywords.md)).
# The implementation is different than the standard CD, making use of zgemm/dgemm calls.
#
#
# Activate the full-frequency static subspace approximation method in sigma.
#do_sigma_subspace

# ### Options for the generalized plasmon-pole (GPP) calculations
# The matrix element of the self-energy operator is
# expanded to first order in the energy around Ecor.
#
#
# This flag controls the finite difference form for numerical derivative
# of $\Sigma(\omega)$:
#
# - grid     = -3 : Calculate Sigma(w) on a grid, using the same frequency grid as
#                 in full-frequency calculations.
# - none     = -2 : dSigma/dE = 0 [skip the expansion].
# - backward = -1 : dSigma/dE = (Sigma(Ecor) - Sigma(Ecor-dE)) / dE
# - central  =  0 : dSigma/dE = (Sigma(Ecor+dE) - Sigma(Ecor-dE)) / (2dE)
# - forward  =  1 : dSigma/dE = (Sigma(Ecor+dE) - Sigma(Ecor)) / dE
# - default  =  2 : forward for diagonal and none for off-diagonal
#finite_difference_form   2
#
# Finite difference spacing given in eV (defaults to 1.0)
#finite_difference_spacing   1.0

# ### Options for Hartree-Fock & hybrid calculations
# For Hartree-Fock/hybrid functional, no `epsmat`/`eps0mat` files are needed.
# Instead provide a list of q-points and the grid size.
# The list of q-points should not be reduced with time
# reversal symmetry - because BerkeleyGW never uses time
# reversal symmetry to unfold the q/k-points. Instead,
# inversion symmetry does the job in the real version of
# the code.
# You can generate this list with kgrid.x: just set the shifts to zero and use
# same grid numbers as for WFN_inner.
#
#
# qx qy qz 1/scale_factor is_q0
#
# Reduced coordinates of q-points.
# scale_factor is for specifying values such as 1/3
# is_q0 indicated whether a q-point is Gamma (1) or not (0)
#begin qpoints
#  0.0  0.0  0.0  1.0  1
#end
#
# The regular grid of q-points corresponding to the list.
#qgrid  1  1  1

# What should we do when we perform a HL-GPP or a GN-GPP calculations and we
# find an invalid mode frequency with $\omega_{GG'}^2 < 0$ Options are:
# -1: Default, same as 3.
# 0: Skip invalid mode and ignore its contribution to the self energy.
# 1: "Find" a purely complex mode frequency. This was the default behavior in BGW-1.x.
# 2: Set the mode frequency to a fixed value of 2 Ry.
# 3: Treat that mode within the static COHSEX approximation (move frequency to infinity).
#invalid_gpp_mode -1

# Add remainder from tail of epsilon for full frequency.
#use_epsilon_remainder

# Logging the convergence of the CH term with respect to the number of bands
# in the output file "ch_converge.dat". Options are:
#
# - 0 to log only the real part of VBM, CBM and the gap (default).
# - 1 to log the real and imag. parts of all bands for which we compute Sigma.
#
#full_ch_conv_log 0

# Use precalculated matrix elements of bare exchange from x.dat.
# The default is not to use them.
#use_xdat

# The default behavior is to load the precalculated exchange-correlation
# matrix elements $\langle n | \hat{V}_{xc} | m \rangle$ from file `vxc.dat`.
# Use this flag to load the whole exchange-correlation matrix 
# in reciprocal space, $V_{xc}(G)$, which should be provided in the file
# `VXC`.
#dont_use_vxcdat

# This flag controls a different way to construct quasiparticle energies
# It needs kih.dat file generated from pw2bgw.x
# KIH = Kinetic + Ion + Hartree
# In this way, we avoid the use of VXC or vxc.dat
# and it enables BerkeleyGW to interface with many other functionals
# such as hybrid, metaGGA (including SCAN), etc.
#use_kihdat

# Fraction of bare exchange.
# Set to 1.0 if you use the exchange-correlation matrix elements
# read from file vxc.dat. Set to 1.0 for local density functional,
# 0.0 for HF, 0.75 for PBE0, 0.80 for B3LYP if you use the local
# part of the exchange-correlation potential read from file VXC.
# For functionals such as HSE whose nonlocal part is not some
# fraction of bare exchange, use vxc.dat and not this option.
# This is set to 1.0 by default.
#
#bare_exchange_fraction   1.0

# Broadening for the energy denominator in CH and SX within GPP.
# If it is less than this value, the sum is better conditioned than
# either CH or SX directly, and will be assigned to SX while CH = 0.
# This is given in eV, the default value is 0.5
#
#gpp_broadening   0.5

# Cutoff for the poles in SX within GPP.
# Divergent contributions that are supposed to sum to zero are removed.
# This is dimensionless, the default value is 4.0
#gpp_sexcutoff   4.0

# kx ky kz 1/scale_factor
#
# scale_factor is for specifying values such as 1/3
begin kpoints
  0.0000  0.0000  0.0000  1.0
end

%include scissors.inp
%include screening.inp
%include common.inp

# Read WFN_inner in HDF5 format (i.e. read from WFN_inner.h5).
#use_wfn_hdf5

# Scissors operator (linear fit of the quasiparticle
# energy corrections) for the bands in WFN_outer.
# Has no effect if WFN_outer is not supplied.
# For valence-band energies:
# ev_cor = ev_in + evs_outer + evdel_outer (ev_in - ev0_outer)
# For conduction-band energies:
# ec_cor = ec_in + ecs_outer + ecdel_outer (ec_in - ec0_outer)
# Defaults below. evs_outer, ev0_outer, ecs_outer, ec0_outer are in eV
#
#
#evs_outer     0.0
#ev0_outer     0.0
#evdel_outer   0.0
#ecs_outer     0.0
#ec0_outer     0.0
#ecdel_outer   0.0
#
# One can specify these parameters in a single line
# as (evs_outer ev0_outer evdel_outer ecs_outer ec0_outer ecdel_outer)
#cvfit_outer   0.0 0.0 0.0 0.0 0.0 0.0

# Set this to use eigenvalues in eqp.dat
# If not set, this file will be ignored.
#eqp_corrections

# Set this to use eigenvalues in eqp_outer.dat
# If not set, this file will be ignored.
# Has no effect if WFN_outer is not supplied.
#eqp_outer_corrections

# The average potential on the faces of the unit cell
# in the non-periodic directions for the bands in WFN_inner
# This is used to correct for the vacuum level
# The default is zero, avgpot is in eV
#
#avgpot   0.0

# The average potential on the faces of the unit cell
# in the non-periodic directions for the bands in WFN_outer
# This is used to correct for the vacuum level.
# Has no effect if WFN_outer is not supplied.
# The default is zero, avgpot_outer is in eV
#
#avgpot_outer   0.0

# Write the bare Coulomb potential $v(q+G)$ to file
#write_vcoul

# Number of pools for parallel sigma calculations
# The default is chosen to minimize memory in calculation
#number_sigma_pools 1

# Threshold for considering bands degenerate, for purpose of
# making sure all of degenerate subspaces are included,
# for band-averaging, and for setting offdiagonals to zero by symmetry. (Ry)
#tol_degeneracy 1e-6

# EXPERIMENTAL FEATURES FOR TESTING PURPOSES ONLY

# 'unfolded BZ' is from the kpoints in the WFN_inner file
# 'full BZ' is generated from the kgrid parameters in the WFN_inner file
# See comments in Common/checkbz.f90 for more details
#
#
# Replace unfolded BZ with full BZ
#fullbz_replace
#
# Write unfolded BZ and full BZ to files
#fullbz_write

# The requested number of bands cannot break degenerate subspace
# Use the following keyword to suppress this check
# Note that you must still provide one more band in
# wavefunction file in order to assess degeneracy
#degeneracy_check_override

# The sum over q-points runs over the full Brillouin zone.
# For diagonal matrix elements between non-degenerate bands
# and for spherically symmetric Coulomb potential (no truncation
# or spherical truncation), the sum over q-points runs over
# the irreducible wedge folded with the symmetries of
# a subgroup of the k-point. The latter is the default.
# In both cases, WFN_inner should have the reduced k-points
# from an unshifted grid, i.e. same as q-points in Epsilon.
# With no_symmetries_q_grid, any calculation can be done;
# use_symmetries_q_grid is faster but only diagonal matrix elements
# of non-degenerate or band-averaged states can be done.
#
#
#no_symmetries_q_grid
#use_symmetries_q_grid

# If no_symmetries_q_grid is used, this flag skips the averaging
# of the degenerate subspace. This might be useful for treating accidental
# degeneracies.
#dont_symmetrize

# Off-diagonal elements are zero if the two states belong to
# different irreducible representations. As a simple proxy,
# we use the size of the degenerate subspaces of the two states:
# if the sizes are different, the irreps are different, and the
# matrix element is set to zero without calculation.
# Turn off this behavior for testing by setting flag below.
# Using WFN_outer effectively sets no_symmetries_offdiagonals.
#
#no_symmetries_offdiagonals

# Rotation of the k-points may bring G-vectors outside of the sphere.
# Use the following keywords to specify whether to die if some of
# the G-vectors fall outside of the sphere. The default is to die.
# Set to die in case screened_coulomb_cutoff = epsilon_cutoff.
# Set to ignore in case screened_coulomb_cutoff < epsilon_cutoff.
#
#
#die_outside_sphere
#ignore_outside_sphere

# Dealing with the convergence of the CH term.
# Set to 0 to compute a partial sum over empty bands.
# Set to 1 to compute the exact static CH.
# In case of exact_static_ch = 1 and frequency_dependence = 1 (GPP) or 2 (FF),
# the partial sum over empty bands is corrected with the static remainder
# which is equal to 1/2 (exact static CH - partial sum static CH),
# additional columns in sigma_hp.log labeled ch', sig', eqp0', eqp1'
# are computed with the partial sum without the static remainder,
# and ch_converge.dat contains the static limit of the partial sum.
# In case of exact_static_ch = 0 and frequency_dependence = 0 (COHSEX),
# columns ch, sig, eqp0, eqp1 contain the exact static CH,
# columns ch', sig', eqp0', eqp1' contain the partial sum static CH,
# and ch_converge.dat contains the static limit of the partial sum.
# For exact_static_ch = 1 and frequency_dependence = 0 (COHSEX),
# columns ch', sig', eqp0', eqp1' are not printed and
# file ch_converge.dat is not written.
# Default is 0 for frequency_dependence = 1 and 2;
# 1 for frequency_dependence = 0;
# has no effect for frequency_dependence  = -1.
# It is important to note that the exact static CH answer
# depends not only on the screened Coulomb cutoff but also on the bare Coulomb cutoff
# because G-G' for G's within the screened Coulomb cutoff can be outside the screened
# Coulomb cutoff sphere. And, therefore, the bare Coulomb cutoff sphere is used.
#exact_static_ch 0

# Do not average W over the minibz, and do not replace the head of eps0mat with
# averaged value. Only use this option for debugging purposes.
#skip_averagew

# By default, the code reads the dielectric matrix for a single q->0 q-point.
# The following flag enables the subsampling of Voronoi cell containing Gamma.
# Your eps0mat file should contain a list of radial q-points (which will not be
# unfolded by symmetries) instead of a single q->0 point. You should provide a
# file subweights.dat containing the weights w(q) associated to each subsampled
# q-point (which will be renormalized so that \sum w(q)=1).
# Using this subsampling allows one to accelerate the convergence with respect
# to the number of q-points, and is especially helpful when dealing with
# large unit cells, truncated Coulomb potential and birefringent materials.
#
#subsample

#BEGIN_INTERNAL_ONLY

# Do not use precalculated matrix elements of exchange-correlation from vxc2.dat.
# The default is to use them.
#dont_use_vxc2dat

# Set this flag if you are interested in calculating a correction to the
# self energy instead of the full self energy. Under the hood, this flag will
# disable reading of vxc.dat and set bare_exchange_fraction to 0. In other
# words, the code will still assume that your "correction" to the dielectric
# matrix is written as $\varepsilon^{-1}_\mathrm{cor} = \delta_{GG} + v\,\chi_\mathrm{cor}$,
# but it won't calculate the bare exchange contribution from the $\delta_{GG'}$ term,
# because we assume it was already calculated before.
#
#sigma_correction

# There is a small error introduced when one uses smooth, nodeless pseudowavefunctions
# in GW calculations, which primarily exhibits itself in the bare exchange. To eliminate this error one
# needs to explicitly include the core states in the mean-field calculation
# so that the valence wavefunctions have the proper nodal structure. However,
# the core states are often separated in space and energy from the valence states
# and have little effect on the final result of a GW calculation. This flag lets
# you exclude the number_core_excluded lowest core states from the sigma summations.
# This saves computational time if the core states are not important other than
# their effect on the nodal structure of the valence states. Note: only the farthest out
# node matters, since nodes farther in have little effect on the calculation. Thus, only
# the first shell of core states need be  included explicitly in the mean-field calculation.
# NOTE: has not been tested with eqp corrections, so consider this feature unsupported if
# if you want to use eqp_corrections. Also, the total charge calculated is still that
# including the excluded core electrons, so ignore this number. This number is not actually
# used in the calculation, so it does not affect the result. Both of these things will be fixed shortly.
#
#number_core_excluded 0

# Whether we want to check WFN norms. Use with pseudobands.
#dont_check_norms

#END_INTERNAL_ONLY
