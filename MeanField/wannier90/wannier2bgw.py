#!/opt/apps/intel19/python3/3.7.0/bin/python3

# wannier2bgw.py -- Author: Zhenglu Li, lzlwell@berkeley.edu, LBNL/UC Berkeley, 2022
# wannier90 UNK/UWK to BerkeleyGW wavefunctions converters
# UWK is generated by a special modified version of Wannier90 by Zhenglu Li
# for wannier-interpolated periodic part of the Bloch wavefunctions

import numpy as np
import pickle

import common
from periodic import periodic_system
import berkeleygw as bgw


def main():
  ''' Main driver '''

  common.print_time('Starting wannier2bgw.py')

  if not common.restart:
    # start from scratch

    # initialize wavefunction object
    wavef = periodic_system(common.prefix, common.latvec, common.ecut)
  
    # read full kpoints list
    wavef.read_kpoints_list()
  
    # preprocessing
    if common.convert == 'split-wannier-kpoints':
      wavef.write_kpoints_list(common.nsplit)
      print('Preprocessing split-kpoints done.')
  
      quit()
  
    # load DFT-UNK wavefunctions
    elif common.convert == 'dft-unk':
      wavef.read_dft_unk_wavefuns()
  
    # load wannier-interpolated UWK files with interp-rotmat
    elif common.convert == 'wannier-interp-uwk':
      wavef.read_wannier_wavefuns(common.nsplit)
  
    wavef.print_info()
  
    ##
    # convert real-space wavefunctions to G-space wavefunctions 
    wavef.unk_to_planewaves()
  
    # save restart data
    with open('wavef.pkl', 'wb') as output:
      pickle.dump(wavef, output, pickle.HIGHEST_PROTOCOL)
  
  else:
    # restart by picking up the wavef data
    with open('wavef.pkl', 'rb') as inp:
      wavef = pickle.load(inp)

    wavef.print_info()

  #
  # write BerkeleyGW format wavefunctions
  bgw.create_wfn(common.wfn_in, common.wfn_out, wavef)

  common.print_time('Done wannier2bgw.py')

  return


#
if __name__ == '__main__':
  main()

